<<<<<<< HEAD
window.BASE_PATH = '/CinemaGo';

const routes = {
    '/': '/frontend/template/home.html',
    '/home': '/frontend/template/home.html',
    '/dangnhap': '/frontend/template/login.html',
    '/dangky': '/frontend/template/register.html',
    '/404': '/frontend/template/404.html',
    '/danhsachphim': '/frontend/template/movies-list.html',
    '/datve': '/frontend/template/booking.html',
    '/khuyenmai': '/frontend/template/404.html',
    '/lienhe': '/frontend/template/contact.html',
    '/chinhsach': '/frontend/template/policy.html',
    '/faq': '/frontend/template/faq.html',
    '/admin/dashboard': '/frontend/template/admin.html',
    '/tickets': '/frontend/template/tickets.html',
=======
// History-based router with base path support (e.g., /CinemaGo)
window.BASE_PATH = '/CinemaGo';

const routes = {
  '/': '/frontend/template/home.html',
  '/home': '/frontend/template/home.html',
  '/dangnhap': '/frontend/template/login.html',
  '/dangky': '/frontend/template/register.html',
  '/404': '/frontend/template/404.html',
  '/danhsachphim': '/frontend/template/home.html',
  '/datve': '/frontend/template/booking.html',
  '/khuyenmai': '/frontend/template/404.html',
  '/lienhe': '/frontend/template/contact.html',
  '/chinhsach': '/frontend/template/policy.html',
  '/faq': '/frontend/template/faq.html',
  "/admin/dashboard": "/frontend/template/admin.html",
  '/tickets': '/frontend/template/tickets.html',
>>>>>>> a31a7b4b4e5f92ce23ebe327a4f9d5a9e4e6527d
};

const appContainer = document.getElementById('app-container');

window.addEventListener('popstate', () => {
    loadContent(location.pathname.replace(BASE_PATH, '') + location.search);
});

document.addEventListener('click', (e) => {
    const link = e.target.closest('a');
    if (link && link.getAttribute('href')?.startsWith(BASE_PATH)) {
        e.preventDefault();
        const path = link.getAttribute('href').replace(BASE_PATH, '');
        navigate(path);
    }
});

document.addEventListener('DOMContentLoaded', () => {
    loadContent(location.pathname.replace(BASE_PATH, '') + location.search);
    initParallax();
});

function navigate(path) {
    history.pushState(null, '', BASE_PATH + path);
    loadContent(path);
}

async function loadContent(url) {
<<<<<<< HEAD
    const urlObj = new URL(url, window.location.origin);
    let pathname = urlObj.pathname.replace(BASE_PATH, '');
    const queryParams = urlObj.searchParams;

    try {
        const mappedRoute = routes[pathname] || routes['/404'];
        const response = await fetch(BASE_PATH + mappedRoute);
        if (!response.ok) throw new Error(`HTTP error: ${response.status}`);

        appContainer.style.opacity = '0';
        appContainer.innerHTML = await response.text();
        appContainer.style.opacity = '1';

        if (pathname === '/' || pathname === '/home' || pathname === '/danhsachphim') getMovieList();
        else if (pathname === '/tickets') loadUserTickets();
        else if (pathname === '/admin/dashboard') loadAdminDashboard();
        else if (pathname === '/datve') {
            if (queryParams.get('id')) {
                loadMovieDetails(queryParams.get('id'));
            } else {
                showModal({
                    title: 'C·∫£nh b√°o',
                    message: 'Kh√¥ng t√¨m th·∫•y ID phim trong URL.',
                    type: 'warning',
                    size: 'md'
                });
            }
        }

        executeScripts();
        updateLoginState();
        updateActiveNavLink(pathname);
    } catch (err) {
        console.error(err);
        appContainer.innerHTML = '<div class="alert alert-danger">Kh√¥ng th·ªÉ t·∫£i trang.</div>';
    }
}

function renderTable({ title, headers, rows, actions }) {
    return `
        <h4>${title}</h4>
        <table class="table table-bordered">
            <thead><tr>${headers.map(h => `<th>${h}</th>`).join('')}</tr></thead>
            <tbody>${rows.map(row => `
                <tr>${row.cells.map(cell => `<td>${cell}</td>`).join('')}
                    ${actions ? `<td>${actions(row.id).join('')}</td>` : ''}
                </tr>`).join('')}
            </tbody>
        </table>
    `;
}

async function loadUserTickets() {
    const container = document.getElementById("tickets-list");
    if (!auth.isLoggedIn()) {
        container.innerHTML = `<div class="alert alert-warning">B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem v√©.</div>`;
        return;
    }

    try {
        const response = await authFetch("http://localhost:8080/api/bookings/me");
        if (!response.ok) throw new Error("L·ªói khi t·∫£i danh s√°ch v√©");

        const data = await response.json();
        container.innerHTML = data.length ? data.map((booking, index) => `
            <div class="card mb-3" style="opacity: 0; animation: fadeIn 0.3s ease-in forwards; animation-delay: ${index * 0.1}s;">
                <div class="card-body">
                    <h5 class="card-title">M√£ v√©: ${booking.bookingCode}</h5>
                    <p class="card-text">
                        <strong>Phim:</strong> ${booking.movie.title}<br>
                        <strong>Ph√≤ng chi·∫øu:</strong> ${booking.showtime.theaterName}<br>
                        <strong>Th·ªùi gian:</strong> ${new Date(booking.showtime.showtime).toLocaleString()}<br>
                        <strong>S·ªë l∆∞·ª£ng v√©:</strong> ${booking.quantity}
                    </p>
                </div>
            </div>
        `).join('') : `<p>Kh√¥ng c√≥ v√© n√†o.</p>`;
    } catch (err) {
        console.error(err);
        container.innerHTML = `<div class="alert alert-danger">Kh√¥ng th·ªÉ t·∫£i danh s√°ch v√©.</div>`;
    }
}

async function loadAdminMovies(container) {
    const data = await (await fetch("http://localhost:8080/api/movies")).json();
    container.innerHTML = `
        <h3 class="mb-3">üé¨ Danh s√°ch phim</h3>
        <button class="btn btn-primary mb-3" id="add-movie">‚ûï Th√™m phim</button>
        ${renderTable({
            title: '',
            headers: ['T√™n phim', 'Ng√†y c√¥ng chi·∫øu', 'Tr·∫°ng th√°i', ''],
            rows: data.map(m => ({
                id: m.id,
                cells: [m.title, new Date(m.release_date).toLocaleDateString(), m.status]
            })),
            actions: id => [
                `<button class="btn btn-warning btn-sm" data-action="edit" data-id="${id}">S·ª≠a</button>`,
                `<button class="btn btn-danger btn-sm" data-action="delete" data-id="${id}">X√≥a</button>`
            ]
        })}
    `;

    container.querySelector("#add-movie").onclick = () => showMovieForm(container);
    container.querySelectorAll("button[data-action='edit']").forEach(btn => {
        btn.onclick = () => showMovieForm(container, btn.dataset.id);
    });
    container.querySelectorAll("button[data-action='delete']").forEach(btn => {
        btn.onclick = () => {
            showConfirmModal({
                message: 'X√°c nh·∫≠n x√≥a phim?',
                onConfirm: async () => {
                    await authFetch(`http://localhost:8080/api/movies/${btn.dataset.id}`, { method: "DELETE" });
                    loadAdminMovies(container);
                },
                size: 'md'
            });
        };
    });
}

async function loadAdminBookings(container) {
    const data = await (await authFetch("http://localhost:8080/api/bookings/all")).json();
    container.innerHTML = renderTable({
        title: 'üéüÔ∏è Danh s√°ch v√© ƒë√£ ƒë·∫∑t',
        headers: ['M√£ v√©', 'Ng∆∞·ªùi ƒë·∫∑t', 'Phim', 'R·∫°p', 'Th·ªùi gian chi·∫øu', 'Th·ªùi gian ƒë·∫∑t v√©', 'S·ªë v√©', ''],
        rows: data.map(b => ({
            id: b.id,
            cells: [
                b.bookingCode,
                b.username,
                b.movieTitle,
                b.theaterName,
                new Date(b.showtime).toLocaleString(),
                new Date(b.createdAt).toLocaleString(),
                b.quantity
            ]
        })),
        actions: id => [
            `<button class="btn btn-sm btn-warning" data-id="${id}" data-action="edit">S·ª≠a</button>`,
            `<button class="btn btn-sm btn-danger" data-id="${id}" data-action="delete">X√≥a</button>`
        ]
    });

    container.querySelectorAll("button[data-action='delete']").forEach(btn => {
        btn.onclick = () => {
            showConfirmModal({
                message: 'X√°c nh·∫≠n x√≥a v√©?',
                onConfirm: async () => {
                    await authFetch(`http://localhost:8080/api/bookings/${btn.dataset.id}`, { method: "DELETE" });
                    loadAdminBookings(container);
                },
                size: 'md'
            });
        };
    });
    container.querySelectorAll("button[data-action='edit']").forEach(btn => {
        btn.onclick = () => showBookingForm(container, btn.dataset.id);
    });
}

async function loadAdminUsers(container) {
    const res = await authFetch("http://localhost:8080/api/users");
    if (!res.ok) {
        container.innerHTML = `<div class="alert alert-danger">Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng.</div>`;
        return;
    }

    const users = await res.json();
    container.innerHTML = renderTable({
        title: 'üë§ Danh s√°ch ng∆∞·ªùi d√πng',
        headers: ['Username', 'Quy·ªÅn', ''],
        rows: users.map(u => ({
            id: u.id,
            cells: [u.username, u.roles]
        })),
        actions: id => [
            `<button class="btn btn-sm btn-warning" data-id="${id}" data-action="edit">S·ª≠a</button>`,
            `<button class="btn btn-sm btn-danger" data-id="${id}" data-action="delete">X√≥a</button>`
        ]
    });

    container.querySelectorAll("button[data-action='edit']").forEach(btn => {
        btn.onclick = () => editUser(btn.dataset.id);
    });
    container.querySelectorAll("button[data-action='delete']").forEach(btn => {
        btn.onclick = () => {
            showConfirmModal({
                message: 'B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?',
                onConfirm: async () => {
                    const res = await authFetch(`http://localhost:8080/api/users/${btn.dataset.id}`, { method: "DELETE" });
                    if (res.ok) {
                        showModal({
                            title: 'Th√†nh c√¥ng',
                            message: 'ƒê√£ x√≥a ng∆∞·ªùi d√πng',
                            type: 'success',
                            autoClose: true,
                            size: 'md'
                        });
                        loadAdminUsers(container);
                    } else {
                        showModal({
                            title: 'L·ªói',
                            message: 'X√≥a th·∫•t b·∫°i',
                            type: 'error',
                            size: 'md'
                        });
                    }
                },
                size: 'md'
            });
        };
    });
}

function loadAdminDashboard() {
    const tabContainer = document.getElementById("admin-tabs");
    const contentContainer = document.getElementById("admin-content");

    tabContainer.addEventListener("click", (e) => {
        const tabLink = e.target.closest(".nav-link");
        if (tabLink) {
            tabContainer.querySelectorAll(".nav-link").forEach(el => el.classList.remove("active"));
            tabLink.classList.add("active");
            const tab = tabLink.getAttribute("data-tab");
            ({ movies: loadAdminMovies, bookings: loadAdminBookings, users: loadAdminUsers })[tab](contentContainer);
        }
    });

    loadAdminMovies(contentContainer);
}

async function editUser(id) {
    const newUsername = prompt("Nh·∫≠p username m·ªõi:");
    if (!newUsername) return;
    const newRole = prompt("Nh·∫≠p quy·ªÅn m·ªõi (USER ho·∫∑c ADMIN):")?.toUpperCase();
    if (!["USER", "ADMIN"].includes(newRole)) {
        showModal({
            title: 'C·∫£nh b√°o',
            message: 'Quy·ªÅn kh√¥ng h·ª£p l·ªá',
            type: 'warning',
            size: 'md'
        });
        return;
    }

    const res = await authFetch(`http://localhost:8080/api/users/${id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username: newUsername, role: newRole })
    });

    const container = document.getElementById("admin-users");
    if (res.ok) {
        showModal({
            title: 'Th√†nh c√¥ng',
            message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng!',
            type: 'success',
            autoClose: true,
            size: 'md'
        });
        container && loadAdminUsers(container);
    } else {
        showModal({
            title: 'L·ªói',
            message: 'L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng',
            type: 'error',
            size: 'md'
        });
    }
}

async function loadMovieDetails(movieId) {
    try {
        const [movieRes, showtimeRes] = await Promise.all([
            fetch(`http://localhost:8080/api/movies/${movieId}`),
            authFetch(`http://localhost:8080/api/showtimes/by-movie/${movieId}`)
        ]);

        if (!movieRes.ok || !showtimeRes.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu phim ho·∫∑c su·∫•t chi·∫øu.");

        const movie = await movieRes.json();
        const showtimes = await showtimeRes.json();
        const movieDetails = document.getElementById('movie-details');

        movieDetails.innerHTML = `
            <div class="card mb-3">
                <div class="row g-0">
                    <div class="col-md-4">
                        <img src="${movie.poster_url}" class="img-fluid rounded-start" alt="Poster phim">
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <h5 class="card-title">${movie.title}</h5>
                            <p class="card-text">${movie.description}</p>
                            <form id="booking-form">
                                <div class="mb-3">
                                    <label for="showtime-select" class="form-label">Ch·ªçn su·∫•t chi·∫øu</label>
                                    <select id="showtime-select" class="form-select" required>
                                        <option value="">-- Ch·ªçn su·∫•t chi·∫øu --</option>
                                        ${showtimes.map(s => `
                                            <option value="${s.id}">
                                                ${s.theaterName} - ${new Date(s.showtime).toLocaleString()} (c√≤n ${s.availableSeats} gh·∫ø)
                                            </option>
                                        `).join('')}
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="ticket-count" class="form-label">S·ªë l∆∞·ª£ng v√©</label>
                                    <input type="number" class="form-control" id="ticket-count" min="1" value="1">
                                </div>
                                <button type="submit" class="btn btn-primary" id="booking-btn">X√°c nh·∫≠n ƒë·∫∑t v√©</button>
                            </form>
                            <div id="seat-container" class="mt-4"></div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        attachBookingFormHandler(movieId);
    } catch (err) {
        console.error(err);
        showModal({
            title: 'L·ªói',
            message: 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin phim ho·∫∑c su·∫•t chi·∫øu.',
            type: 'error',
            size: 'md'
        });
    }
}

function attachBookingFormHandler(movieId) {
    const bookingForm = document.getElementById('booking-form');
    const showtimeSelect = document.getElementById("showtime-select");
    const seatContainer = document.getElementById("seat-container");
    const bookingBtn = document.getElementById('booking-btn');
    let selectedSeats = [];

    if (!bookingForm || !showtimeSelect) return;

    showtimeSelect.addEventListener("change", async () => {
        const showtimeId = showtimeSelect.value;
        if (!showtimeId) {
            seatContainer.innerHTML = "";
            return;
        }

        const showtime = await (await authFetch(`http://localhost:8080/api/showtimes/${showtimeId}`)).json();
        const seatMap = showtime.seatMap?.split(",") || [];

        seatContainer.innerHTML = `
            <h5>Ch·ªçn gh·∫ø:</h5>
            <div class="d-flex flex-wrap">${seatMap.map(entry => {
                const [code, status] = entry.split(":");
                const disabled = status !== "available" ? "disabled btn-secondary" : "btn-outline-success";
                return `<button class="seat btn ${disabled} m-1" data-seat="${code}" ${status !== "available" ? "disabled" : ""}>${code}</button>`;
            }).join('')}</div>
        `;

        selectedSeats = [];
        seatContainer.addEventListener("click", (e) => {
        if (e.target.classList.contains("seat") && !e.target.disabled) {
            const seat = e.target.dataset.seat;
            if (selectedSeats.includes(seat)) {
                selectedSeats = selectedSeats.filter(s => s !== seat);
                e.target.classList.remove("btn-success");
                e.target.classList.add("btn-outline-success");
            } else {
                selectedSeats.push(seat);
                e.target.classList.remove("btn-outline-success");
                e.target.classList.add("btn-success");
            }
        }
    });


        document.getElementById('ticket-count').addEventListener("change", () => {
            selectedSeats = [];
            seatContainer.querySelectorAll(".seat.btn-success").forEach(btn => {
                btn.classList.replace("btn-success", "btn-outline-success");
            });
        }, { once: true });
    });

    bookingForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        bookingBtn.classList.add('loading');
        bookingBtn.disabled = true;
        if (!auth.isLoggedIn()) {
            showModal({
                title: 'C·∫£nh b√°o',
                message: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t v√©!',
                type: 'warning',
                size: 'md'
            });
            window.router.navigate("/dangnhap");
            bookingBtn.classList.remove('loading');
            bookingBtn.disabled = false;
            return;
        }

        const ticketCount = parseInt(document.getElementById('ticket-count').value, 10);
        const showtimeId = showtimeSelect.value;

        if (!showtimeId || selectedSeats.length !== ticketCount) {
            showModal({
                title: 'C·∫£nh b√°o',
                message: 'Vui l√≤ng ch·ªçn ƒë√∫ng s·ªë gh·∫ø theo s·ªë l∆∞·ª£ng v√©.',
                type: 'warning',
                size: 'md'
            });
            bookingBtn.classList.remove('loading');
            bookingBtn.disabled = false;
            return;
        }

        try {
            const response = await authFetch('http://localhost:8080/api/bookings', {
                method: 'POST',
                body: JSON.stringify({
                    movieId: parseInt(movieId),
                    showtimeId: parseInt(showtimeId),
                    quantity: ticketCount,
                    selectedSeats
                })
            });

            if (!response.ok) throw new Error(await response.text() || "ƒê·∫∑t v√© th·∫•t b·∫°i.");

            showModal({
                title: 'Th√†nh c√¥ng',
                message: 'ƒê·∫∑t v√© th√†nh c√¥ng!',
                type: 'success',
                autoClose: true,
                size: 'md'
            });
            window.router.navigate("/tickets");
        } catch (error) {
            console.error("L·ªói ƒë·∫∑t v√©:", error);
            showModal({
                title: 'L·ªói',
                message: `Kh√¥ng th·ªÉ ƒë·∫∑t v√©: ${error.message}`,
                type: 'error',
                size: 'md'
            });
        } finally {
            bookingBtn.classList.remove('loading');
            bookingBtn.disabled = false;
        }
    });
=======
  const urlObj = new URL(url, window.location.origin);
  let pathname = urlObj.pathname;
if (pathname.startsWith(BASE_PATH)) {
    pathname = pathname.slice(BASE_PATH.length); // Lo·∫°i b·ªè '/CinemaGo'
}

  // Chu·∫©n h√≥a ƒë·ªÉ lo·∫°i BASE_PATH ra (v√≠ d·ª• /CinemaGo)
  if (pathname.startsWith(BASE_PATH)) {
    pathname = pathname.slice(BASE_PATH.length);
  }

  const queryParams = urlObj.searchParams;

  try {
    const mappedRoute = routes[pathname] || routes['/404'];
    const route = BASE_PATH + mappedRoute;
    const response = await fetch(route);
    if (!routes[pathname]) {
        console.warn("Kh√¥ng t√¨m th·∫•y route:", pathname, " ‚Üí chuy·ªÉn sang 404");
    }
    if (!response.ok) throw new Error(`HTTP error: ${response.status}`);

    const content = await response.text();
    appContainer.innerHTML = content;

    if (pathname === '/' || pathname === '/home') {
      getMovieList();
    }

    if (pathname === '/tickets') {
      loadUserTickets();
    }

    if (pathname === "/admin/dashboard") {
      loadAdminDashboard();
    }

    if (pathname === '/datve') {
      const movieId = queryParams.get('id');
      if (movieId) {
        loadMovieDetails(movieId);
      } else {
        alert("Kh√¥ng t√¨m th·∫•y ID phim trong URL.");
      }
    }

    executeScripts();
    updateLoginState();
  } catch (err) {
    console.error(err);
    appContainer.innerHTML = '<div class="alert alert-danger">Kh√¥ng th·ªÉ t·∫£i trang.</div>';
  }
>>>>>>> a31a7b4b4e5f92ce23ebe327a4f9d5a9e4e6527d
}

async function loadUserTickets() {
  const container = document.getElementById("tickets-list");

  if (!auth.isLoggedIn()) {
    container.innerHTML = `<div class="alert alert-warning">B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem v√©.</div>`;
    return;
  }

  try {
    const response = await authFetch("http://localhost:8080/api/bookings/me");

    if (!response.ok) {
      throw new Error("L·ªói khi t·∫£i danh s√°ch v√©");
    }

    const data = await response.json();

    if (data.length === 0) {
      container.innerHTML = `<p>Kh√¥ng c√≥ v√© n√†o.</p>`;
      return;
    }

    container.innerHTML = data.map(booking => `
      <div class="card mb-3">
        <div class="card-body">
          <h5 class="card-title">M√£ v√©: ${booking.bookingCode}</h5>
          <p class="card-text">
            <strong>Phim:</strong> ${booking.movie.title}<br>
            <strong>Ph√≤ng chi·∫øu:</strong> ${booking.showtime.theaterName}<br>
            <strong>Th·ªùi gian:</strong> ${new Date(booking.showtime.showtime).toLocaleString()}<br>
            <strong>S·ªë l∆∞·ª£ng v√©:</strong> ${booking.quantity}
          </p>
        </div>
      </div>
    `).join("");
  } catch (err) {
    console.error(err);
    container.innerHTML = `<div class="alert alert-danger">Kh√¥ng th·ªÉ t·∫£i danh s√°ch v√©.</div>`;
  }
}

async function loadAdminMovies(container) {
  const res = await fetch("http://localhost:8080/api/movies");
  const movies = await res.json();

  container.innerHTML = `
    <h4>üé¨ Danh s√°ch phim</h4>
    <button class="btn btn-primary mb-2" id="add-movie-btn">‚ûï Th√™m phim</button>
    <table class="table table-bordered">
      <thead><tr><th>T√™n</th><th>Trailer</th><th>H√†nh ƒë·ªông</th></tr></thead>
      <tbody>
        ${movies.map(m => `
          <tr>
            <td>${m.title}</td>
            <td><a href="${m.trailer}" target="_blank">Xem</a></td>
            <td>
              <button class="btn btn-sm btn-warning" data-id="${m.id}" data-action="edit">S·ª≠a</button>
              <button class="btn btn-sm btn-danger" data-id="${m.id}" data-action="delete">X√≥a</button>
            </td>
          </tr>`).join("")}
      </tbody>
    </table>
  `;

  // Th√™m, s·ª≠a, x√≥a
  document.getElementById("add-movie-btn").onclick = () => showMovieForm(container);

  container.querySelectorAll("button[data-action='edit']").forEach(btn => {
    btn.onclick = () => showMovieForm(container, btn.dataset.id);
  });

  container.querySelectorAll("button[data-action='delete']").forEach(btn => {
    btn.onclick = async () => {
      if (confirm("X√°c nh·∫≠n x√≥a phim?")) {
        await authFetch(`http://localhost:8080/api/movies/${btn.dataset.id}`, { method: "DELETE" });
        loadAdminMovies(container);
      }
    };
  });
}

async function loadAdminBookings(container) {
  const res = await authFetch("http://localhost:8080/api/bookings/all");
  const data = await res.json();

  container.innerHTML = `
    <h4>üéüÔ∏è Danh s√°ch v√© ƒë√£ ƒë·∫∑t</h4>
    <table class="table table-bordered">
      <thead><tr>
        <th>M√£ v√©</th><th>Ng∆∞·ªùi ƒë·∫∑t</th><th>Phim</th><th>R·∫°p</th><th>Th·ªùi gian</th><th>S·ªë v√©</th>
      </tr></thead>
      <tbody>
        ${data.map(b => `
          <tr>
            <td>${b.bookingCode}</td>
            <td>${b.username}</td>
            <td>${b.movieTitle}</td>
            <td>${b.theaterName}</td>
            <td>${new Date(b.showtime).toLocaleString()}</td>
            <td>${b.quantity}</td>
          </tr>`).join("")}
      </tbody>
    </table>
  `;
}
async function loadAdminUsers(container) {
  const res = await authFetch("http://localhost:8080/api/users");

  if (!res.ok) {
    container.innerHTML = `<div class="alert alert-danger">Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng.</div>`;
    return;
  }

  const users = await res.json();

  container.innerHTML = `
    <h4>üë§ Danh s√°ch ng∆∞·ªùi d√πng</h4>
    <table class="table table-bordered">
      <thead>
        <tr><th>Username</th><th>Quy·ªÅn</th><th>H√†nh ƒë·ªông</th></tr>
      </thead>
      <tbody>
        ${users.map(u => `
          <tr>
            <td>${u.username}</td>
            <td>${u.roles}</td>
            <td>
              <button onclick="editUser(${u.id})" class="btn btn-sm btn-warning">S·ª≠a</button>
              <button onclick="deleteUser(${u.id})" class="btn btn-sm btn-danger">X√≥a</button>
            </td>
          </tr>
        `).join("")}
      </tbody>
    </table>
  `;
}

function loadAdminDashboard() {
  const tabContainer = document.getElementById("admin-tabs");
  const contentContainer = document.getElementById("admin-content");

  tabContainer.addEventListener("click", (e) => {
    if (e.target.classList.contains("nav-link")) {
      [...tabContainer.querySelectorAll(".nav-link")].forEach(el => el.classList.remove("active"));
      e.target.classList.add("active");
      const tab = e.target.getAttribute("data-tab");

      switch (tab) {
        case "movies": loadAdminMovies(contentContainer); break;
        case "bookings": loadAdminBookings(contentContainer); break;
        case "users": loadAdminUsers(contentContainer); break;
      }
    }
  });

  // Load m·∫∑c ƒë·ªãnh
  loadAdminMovies(contentContainer);
}

async function deleteUser(id) {
  if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?")) return;

  const res = await authFetch(`http://localhost:8080/api/users/${id}`, {
    method: "DELETE"
  });

  if (res.ok) {
    alert("ƒê√£ x√≥a ng∆∞·ªùi d√πng");

    const container = document.getElementById("admin-users");
    if (!container) {
      console.warn("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #admin-users");
      return;
    }

    loadAdminUsers(container);
  } else {
    alert("X√≥a th·∫•t b·∫°i");
  }
}



async function editUser(id) {
  if (!id) return alert("ID kh√¥ng h·ª£p l·ªá");

  const newUsername = prompt("Nh·∫≠p username m·ªõi:");
  if (!newUsername) return;

  const newRole = prompt("Nh·∫≠p quy·ªÅn m·ªõi (USER ho·∫∑c ADMIN):");
  if (!newRole || !["USER", "ADMIN"].includes(newRole.toUpperCase())) {
    return alert("Quy·ªÅn kh√¥ng h·ª£p l·ªá");
  }

  const res = await authFetch(`http://localhost:8080/api/users/${id}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      username: newUsername,
      role: newRole.toUpperCase()
    })
  });

  if (res.ok) {
    alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");

    const container = document.getElementById("admin-users");
    if (!container) {
      console.warn("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #admin-users");
      return;
    }

    loadAdminUsers(container);
  } else {
    alert("L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng");
  }
}


async function loadMovieDetails(movieId) {
    try {
        const [movieRes, showtimeRes] = await Promise.all([
            fetch(`http://localhost:8080/api/movies/${movieId}`),
            fetch(`http://localhost:8080/api/showtimes/by-movie/${movieId}`)
        ]);

        if (!movieRes.ok || !showtimeRes.ok) {
            throw new Error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu phim ho·∫∑c su·∫•t chi·∫øu.");
        }

        const movie = await movieRes.json();
        const showtimes = await showtimeRes.json();

        const movieDetails = document.getElementById('movie-details');

        const showtimeOptions = showtimes.map(showtime => `
            <option value="${showtime.id}">
                ${showtime.theaterName} - ${new Date(showtime.showtime).toLocaleString()} (c√≤n ${showtime.availableSeats} gh·∫ø)
            </option>
        `).join("");

        movieDetails.innerHTML = `
            <div class="card mb-3">
                <div class="row g-0">
                    <div class="col-md-4">
                        <img src="${movie.poster_url}" class="img-fluid rounded-start" alt="Poster phim">
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <h5 class="card-title">${movie.title}</h5>
                            <p class="card-text">${movie.description}</p>
                            <form id="booking-form">
                                <div class="mb-3">
                                    <label for="showtime-select" class="form-label">Ch·ªçn su·∫•t chi·∫øu</label>
                                    <select id="showtime-select" class="form-select" required>
                                        <option value="">-- Ch·ªçn su·∫•t chi·∫øu --</option>
                                        ${showtimeOptions}
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="ticket-count" class="form-label">S·ªë l∆∞·ª£ng v√©</label>
                                    <input type="number" class="form-control" id="ticket-count" min="1" value="1">
                                </div>
                                <button type="submit" class="btn btn-primary">X√°c nh·∫≠n ƒë·∫∑t v√©</button>
                            </form>
                            <div id="seat-container" class="mt-4">
                              <!-- gh·∫ø s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y -->
                          </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        attachBookingFormHandler(movieId);

    } catch (err) {
        console.error(err);
        alert("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin phim ho·∫∑c su·∫•t chi·∫øu.");
    }
}

function attachBookingFormHandler(movieId) {
    const bookingForm = document.getElementById('booking-form');
    const showtimeSelect = document.getElementById("showtime-select");
    const seatContainer = document.getElementById("seat-container");

    let selectedSeats = [];

    if (!bookingForm || !showtimeSelect) return;

    // üëá Khi user ch·ªçn su·∫•t chi·∫øu ‚Üí load s∆° ƒë·ªì gh·∫ø
    showtimeSelect.addEventListener("change", async () => {
    const showtimeId = showtimeSelect.value;
    if (!showtimeId) {
        seatContainer.innerHTML = "";
        return;
    }

    const res = await fetch(`http://localhost:8080/api/showtimes/${showtimeId}`);
    const showtime = await res.json();

    const seatMap = showtime.seatMap?.split(",") || [];

    const seatHTML = seatMap.map(entry => {
        const [code, status] = entry.split(":");
        const disabled = status !== "available" ? "disabled btn-secondary" : "btn-outline-success";
        return `<button class="seat btn ${disabled} m-1" data-seat="${code}" ${status !== "available" ? "disabled" : ""}>${code}</button>`;
    }).join("");

    seatContainer.innerHTML = `
        <h5>Ch·ªçn gh·∫ø:</h5>
        <div class="d-flex flex-wrap">${seatHTML}</div>
    `;

    selectedSeats = [];

    seatContainer.addEventListener("click", (e) => {
        if (e.target.classList.contains("seat") && !e.target.disabled) {
            const seat = e.target.dataset.seat;
            if (selectedSeats.includes(seat)) {
                selectedSeats = selectedSeats.filter(s => s !== seat);
                e.target.classList.remove("btn-success");
                e.target.classList.add("btn-outline-success");
            } else {
                selectedSeats.push(seat);
                e.target.classList.remove("btn-outline-success");
                e.target.classList.add("btn-success");
            }
        }
    });
});


    // üëá X·ª≠ l√Ω submit form ƒë·∫∑t v√©
    bookingForm.addEventListener('submit', async (event) => {
  event.preventDefault();

  // ‚úÖ Ki·ªÉm tra ƒëƒÉng nh·∫≠p
  if (!auth.isLoggedIn()) {
    alert("‚ö†Ô∏è B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t v√©!");
    window.router.navigate("/dangnhap");
    return;
  }

  const ticketCount = parseInt(document.getElementById('ticket-count').value, 10);
  const showtimeId = showtimeSelect.value;

  if (!showtimeId || selectedSeats.length === 0) {
    alert("Vui l√≤ng ch·ªçn su·∫•t chi·∫øu v√† gh·∫ø.");
    return;
  }

  try {
    const response = await authFetch('http://localhost:8080/api/bookings', {
      method: 'POST',
      body: JSON.stringify({
        movieId: parseInt(movieId),
        showtimeId: parseInt(showtimeId),
        quantity: ticketCount,
        selectedSeats: selectedSeats
      })
    });

    if (!response.ok) {
      const text = await response.text();
      throw new Error(text || "ƒê·∫∑t v√© th·∫•t b·∫°i.");
    }

    alert("üéâ ƒê·∫∑t v√© th√†nh c√¥ng!");
    window.router.navigate("/tickets");
  } catch (error) {
    console.error("L·ªói ƒë·∫∑t v√©:", error);
    alert("Kh√¥ng th·ªÉ ƒë·∫∑t v√©: " + error.message);
  }
});
}


function updateActiveNavLink(pathname) {
    document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.toggle('active', link.getAttribute('href')?.replace(BASE_PATH, '') === pathname);
    });
}

function executeScripts() {
<<<<<<< HEAD
    appContainer.querySelectorAll('script:not([src])').forEach(oldScript => {
        const newScript = document.createElement('script');
        newScript.textContent = oldScript.textContent;
        oldScript.parentNode.replaceChild(newScript, oldScript);
    });
}

function showBookingForm(container, bookingId) {
    fetch(`http://localhost:8080/api/bookings/${bookingId}`)
        .then(res => {
            if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin v√©");
            return res.json();
        })
        .then(b => {
            container.innerHTML = `
                <h4>‚úèÔ∏è S·ª≠a v√©</h4>
                <form id="edit-booking-form">
                    <label>M√£ v√©:</label>
                    <input class="form-control mb-2" value="${b.bookingCode}" disabled>
                    <label>T√™n phim:</label>
                    <input class="form-control mb-2" name="movieTitle" value="${b.movieTitle}" required>
                    <label>R·∫°p chi·∫øu:</label>
                    <input class="form-control mb-2" name="theaterName" value="${b.theaterName}" required>
                    <label>Th·ªùi gian chi·∫øu:</label>
                    <input class="form-control mb-2" name="showtime" type="datetime-local" value="${b.showtime.replace(' ', 'T')}" required>
                    <label>S·ªë l∆∞·ª£ng v√©:</label>
                    <input class="form-control mb-2" name="quantity" type="number" value="${b.quantity}" min="1">
                    <button class="btn btn-success" id="edit-booking-btn">L∆∞u</button>
                </form>
            `;

            document.getElementById("edit-booking-form").onsubmit = async (e) => {
                e.preventDefault();
                const editBtn = document.getElementById('edit-booking-btn');
                editBtn.classList.add('loading');
                editBtn.disabled = true;
                const form = e.target;
                await authFetch(`http://localhost:8080/api/bookings/${bookingId}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ quantity: parseInt(form.quantity.value, 10) })
                });
                loadAdminBookings(container);
                editBtn.classList.remove('loading');
                editBtn.disabled = false;
            };
        })
        .catch(err => {
            showModal({
                title: 'L·ªói',
                message: `L·ªói: ${err.message}`,
                type: 'error',
                size: 'md'
            });
        });
}

function showMovieForm(container, movieId = null) {
    const movie = { title: "", description: "", release_date: "", poster_url: "", trailer_url: "", status: "COMING_SOON" };
    const fetchMovie = movieId ? fetch(`http://localhost:8080/api/movies/${movieId}`).then(res => res.json()) : Promise.resolve(movie);

    fetchMovie.then(data => {
        Object.assign(movie, data);
        container.innerHTML = `
            <h4>${movieId ? "‚úèÔ∏è S·ª≠a" : "‚ûï Th√™m"} phim</h4>
            <form id="movie-form">
                <input class="form-control mb-2" placeholder="T√™n phim" name="title" value="${movie.title}" required>
                <input class="form-control mb-2" placeholder="Ng√†y c√¥ng chi·∫øu" name="release_date" type="date" value="${movie.release_date?.split('T')[0] || ''}" required>
                <select class="form-control mb-2" name="status">
                    <option value="COMING_SOON" ${movie.status === "COMING_SOON" ? "selected" : ""}>COMING_SOON</option>
                    <option value="NOW_SHOWING" ${movie.status === "NOW_SHOWING" ? "selected" : ""}>NOW_SHOWING</option>
                    <option value="STOPPED" ${movie.status === "STOPPED" ? "selected" : ""}>STOPPED</option>
                </select>
                <input class="form-control mb-2" placeholder="Poster URL" name="poster_url" value="${movie.poster_url}">
                <input class="form-control mb-2" placeholder="Trailer URL" name="trailer_url" value="${movie.trailer_url}">
                <textarea class="form-control mb-2" placeholder="M√¥ t·∫£" name="description">${movie.description}</textarea>
                <button class="btn btn-success" id="movie-form-btn">${movieId ? "C·∫≠p nh·∫≠t" : "Th√™m"}</button>
            </form>
        `;

        document.getElementById("movie-form").onsubmit = async (e) => {
            e.preventDefault();
            const movieBtn = document.getElementById('movie-form-btn');
            movieBtn.classList.add('loading');
            movieBtn.disabled = true;
            const form = e.target;
            const body = {
                title: form.title.value,
                description: form.description.value,
                release_date: form.release_date.value,
                status: form.status.value,
                poster_url: form.poster_url.value,
                trailer_url: form.trailer_url.value
            };

            await authFetch(`http://localhost:8080/api/movies${movieId ? `/${movieId}` : ''}`, {
                method: movieId ? "PUT" : "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(body)
            });

            loadAdminMovies(container);
            movieBtn.classList.remove('loading');
            movieBtn.disabled = false;
        };
    });
}

function initParallax() {
    const parallaxSections = document.querySelectorAll('.parallax-section');
    if (!parallaxSections.length) return;

    const updateParallax = () => {
        parallaxSections.forEach(section => {
            const rect = section.getBoundingClientRect();
            const scrollY = window.scrollY;
            if (rect.top < window.innerHeight && rect.bottom > 0) {
                section.style.backgroundPositionY = `${scrollY * 0.3}px`;
            }
        });
        requestAnimationFrame(updateParallax);
    };
    requestAnimationFrame(updateParallax);
}
=======
  const scripts = appContainer.querySelectorAll('script');
  scripts.forEach(oldScript => {
    const newScript = document.createElement('script');
    Array.from(oldScript.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value));
    newScript.textContent = oldScript.textContent;

    // Kh√¥ng reload l·∫°i script c√≥ src (ƒë√£ load ·ªü index.html)
    if (!newScript.src) {
      oldScript.parentNode.replaceChild(newScript, oldScript);
    }
  });
}

document.addEventListener('click', function (e) {
  const link = e.target.closest('a');
  if (link && link.getAttribute('href')?.startsWith(BASE_PATH)) {
    e.preventDefault();
    const path = link.getAttribute('href').replace(BASE_PATH, '');
    navigate(path);
  }
});
>>>>>>> a31a7b4b4e5f92ce23ebe327a4f9d5a9e4e6527d

window.router = { navigate };